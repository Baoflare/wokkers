# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: ../common.yml
  localCommons: common.yml
  uploadCommons: ../upload/common.yml

service:
  auth: true
  base-path: /games/{game_id}/builds
  path-parameters:
    game_id: uuid
  endpoints:
    getBuild:
      path: /{build_id}
      method: GET
      docs: >-
        Lists all builds of the game associated with the token used. Can be
        filtered by tags in the query string.
      path-parameters:
        build_id: uuid
      request:
        name: GetBuildRequest
        query-parameters:
          tags_json: optional<string>
          game_id: optional<uuid>
      response: GetBuildResponse

    listBuilds:
      path: ""
      method: GET
      docs: >-
        Lists all builds of the game associated with the token used. Can be
        filtered by tags in the query string.
      request:
        name: ListBuildsRequest
        query-parameters:
          tags_json: optional<string>
          game_id: optional<uuid>
      response: ListBuildsResponse

    patchTags:
      path: /{build_id}/tags
      method: PATCH
      path-parameters:
        build_id: uuid
      request:
        body: PatchBuildTagsRequest
      response: PatchBuildTagsResponse

    prepareBuild:
      path: /prepare
      method: POST
      docs: Creates a new game build for the given game.
      request:
        body: CreateBuildRequest
      response: CreateBuildResponse

    completeBuild:
      path: /{build_id}/complete
      method: POST
      docs: Marks an upload as complete.
      path-parameters:
        build_id: uuid

types:
  GetBuildResponse:
    properties:
      build: localCommons.Build

  ListBuildsResponse:
    properties:
      builds:
        docs: A list of builds for the game associated with the token.
        type: list<localCommons.Build>

  PatchBuildTagsRequest:
    properties:
      tags: unknown
      exclusive_tags:
        docs: Removes the given tag keys from all other builds.
        type: optional<list<string>>

  PatchBuildTagsResponse:
    properties: {}

  CreateBuildRequest:
    properties:
      name: string
      image_tag:
        docs: A tag given to the game build.
        type: string
      image_file: uploadCommons.PrepareFile
      multipart_upload:
        type: optional<boolean>
      kind: optional<BuildKind>
      compression: optional<BuildCompression>

  CreateBuildResponse:
    properties:
      build: uuid
      image_presigned_request: optional<uploadCommons.PresignedRequest>
      image_presigned_requests: optional<list<uploadCommons.PresignedRequest>>

  BuildKind:
    enum:
      - value: docker_image
        docs: Docker image archive generated by `docker save`.
      - value: oci_bundle
        docs: OCI-compliant bundle.

  BuildCompression:
    enum:
      - value: none
        docs: None compression.
      - value: lz4
        docs: LZ4 compression. Use the minimum compression level.
