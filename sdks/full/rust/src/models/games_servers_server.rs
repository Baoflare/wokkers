/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GamesServersServer {
    #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
    pub arguments: Option<Vec<String>>,
    #[serde(rename = "cluster_id")]
    pub cluster_id: uuid::Uuid,
    #[serde(rename = "create_ts")]
    pub create_ts: i64,
    #[serde(rename = "datacenter_id")]
    pub datacenter_id: uuid::Uuid,
    #[serde(rename = "destroy_ts", skip_serializing_if = "Option::is_none")]
    pub destroy_ts: Option<i64>,
    #[serde(rename = "environment", skip_serializing_if = "Option::is_none")]
    pub environment: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "game_id")]
    pub game_id: uuid::Uuid,
    #[serde(rename = "image_id")]
    pub image_id: uuid::Uuid,
    /// The duration to wait for in milliseconds before killing the server. This should be set to a safe default, and can be overridden during a DELETE request if needed.
    #[serde(rename = "kill_timeout", skip_serializing_if = "Option::is_none")]
    pub kill_timeout: Option<i64>,
    #[serde(rename = "network")]
    pub network: Box<crate::models::GamesServersNetwork>,
    #[serde(rename = "resources")]
    pub resources: Box<crate::models::GamesServersResources>,
    #[serde(rename = "server_id")]
    pub server_id: uuid::Uuid,
    #[serde(rename = "start_ts", skip_serializing_if = "Option::is_none")]
    pub start_ts: Option<i64>,
    #[serde(rename = "tags", deserialize_with = "Option::deserialize")]
    pub tags: Option<serde_json::Value>,
}

impl GamesServersServer {
    pub fn new(cluster_id: uuid::Uuid, create_ts: i64, datacenter_id: uuid::Uuid, game_id: uuid::Uuid, image_id: uuid::Uuid, network: crate::models::GamesServersNetwork, resources: crate::models::GamesServersResources, server_id: uuid::Uuid, tags: Option<serde_json::Value>) -> GamesServersServer {
        GamesServersServer {
            arguments: None,
            cluster_id,
            create_ts,
            datacenter_id,
            destroy_ts: None,
            environment: None,
            game_id,
            image_id,
            kill_timeout: None,
            network: Box::new(network),
            resources: Box::new(resources),
            server_id,
            start_ts: None,
            tags,
        }
    }
}


