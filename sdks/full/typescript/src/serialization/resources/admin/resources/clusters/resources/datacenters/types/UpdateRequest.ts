/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../..";
import * as Rivet from "../../../../../../../../api";
import * as core from "../../../../../../../../core";

export const UpdateRequest: core.serialization.ObjectSchema<
    serializers.admin.clusters.datacenters.UpdateRequest.Raw,
    Rivet.admin.clusters.datacenters.UpdateRequest
> = core.serialization.object({
    poolType: core.serialization.property(
        "pool_type",
        core.serialization.lazy(async () => (await import("../../../../../../..")).admin.PoolType)
    ),
    hardware: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("../../../../../../..")).admin.Hardware)
    ),
    desiredCount: core.serialization.property("desired_count", core.serialization.number().optional()),
    maxCount: core.serialization.property("max_count", core.serialization.number().optional()),
    drainTimeout: core.serialization.property("drain_timeout", core.serialization.number().optional()),
});

export declare namespace UpdateRequest {
    interface Raw {
        pool_type: serializers.admin.PoolType.Raw;
        hardware: serializers.admin.Hardware.Raw[];
        desired_count?: number | null;
        max_count?: number | null;
        drain_timeout?: number | null;
    }
}
