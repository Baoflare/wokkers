/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const Datacenter: core.serialization.ObjectSchema<serializers.admin.Datacenter.Raw, Rivet.admin.Datacenter> =
    core.serialization.object({
        datacenterId: core.serialization.property("datacenter_id", core.serialization.string()),
        clusterId: core.serialization.property("cluster_id", core.serialization.string()),
        nameId: core.serialization.property("name_id", core.serialization.string()),
        displayName: core.serialization.property("display_name", core.serialization.string()),
        provider: core.serialization.lazy(async () => (await import("../../../../..")).admin.Provider),
        providerDatacenterId: core.serialization.property("provider_datacenter_id", core.serialization.string()),
        providerApiToken: core.serialization.property("provider_api_token", core.serialization.string().optional()),
        pools: core.serialization.list(
            core.serialization.lazyObject(async () => (await import("../../../../..")).admin.Pool)
        ),
        buildDeliveryMethod: core.serialization.property(
            "build_delivery_method",
            core.serialization.lazy(async () => (await import("../../../../..")).admin.BuildDeliveryMethod)
        ),
    });

export declare namespace Datacenter {
    interface Raw {
        datacenter_id: string;
        cluster_id: string;
        name_id: string;
        display_name: string;
        provider: serializers.admin.Provider.Raw;
        provider_datacenter_id: string;
        provider_api_token?: string | null;
        pools: serializers.admin.Pool.Raw[];
        build_delivery_method: serializers.admin.BuildDeliveryMethod.Raw;
    }
}
