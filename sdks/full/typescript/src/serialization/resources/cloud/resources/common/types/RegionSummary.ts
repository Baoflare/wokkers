/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const RegionSummary: core.serialization.ObjectSchema<
    serializers.cloud.RegionSummary.Raw,
    Rivet.cloud.RegionSummary
> = core.serialization.object({
    regionId: core.serialization.property("region_id", core.serialization.string()),
    regionNameId: core.serialization.property("region_name_id", core.serialization.string()),
    provider: core.serialization.string(),
    universalRegion: core.serialization.property(
        "universal_region",
        core.serialization.lazy(async () => (await import("../../../../..")).cloud.UniversalRegion)
    ),
    providerDisplayName: core.serialization.property(
        "provider_display_name",
        core.serialization.lazy(async () => (await import("../../../../..")).DisplayName)
    ),
    regionDisplayName: core.serialization.property(
        "region_display_name",
        core.serialization.lazy(async () => (await import("../../../../..")).DisplayName)
    ),
});

export declare namespace RegionSummary {
    interface Raw {
        region_id: string;
        region_name_id: string;
        provider: string;
        universal_region: serializers.cloud.UniversalRegion.Raw;
        provider_display_name: serializers.DisplayName.Raw;
        region_display_name: serializers.DisplayName.Raw;
    }
}
