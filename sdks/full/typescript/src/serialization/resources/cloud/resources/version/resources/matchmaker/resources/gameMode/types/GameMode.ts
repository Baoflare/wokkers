/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../../../index";
import * as Rivet from "../../../../../../../../../../api/index";
import * as core from "../../../../../../../../../../core";
import { GameModeRegion as cloud_version_matchmaker_game_mode$$gameModeRegion } from "./GameModeRegion";
import { GameModeRuntimeDocker as cloud_version_matchmaker_game_mode$$gameModeRuntimeDocker } from "./GameModeRuntimeDocker";
import { GameModeActions as cloud_version_matchmaker_game_mode$$gameModeActions } from "./GameModeActions";
import { GameModeIdleLobbiesConfig as cloud_version_matchmaker_game_mode$$gameModeIdleLobbiesConfig } from "./GameModeIdleLobbiesConfig";
import { cloud } from "../../../../../../../../index";

export const GameMode: core.serialization.ObjectSchema<
    serializers.cloud.version.matchmaker.GameMode.Raw,
    Rivet.cloud.version.matchmaker.GameMode
> = core.serialization.object({
    regions: core.serialization
        .record(core.serialization.string(), cloud_version_matchmaker_game_mode$$gameModeRegion)
        .optional(),
    maxPlayers: core.serialization.property("max_players", core.serialization.number().optional()),
    maxPlayersDirect: core.serialization.property("max_players_direct", core.serialization.number().optional()),
    maxPlayersParty: core.serialization.property("max_players_party", core.serialization.number().optional()),
    docker: cloud_version_matchmaker_game_mode$$gameModeRuntimeDocker.optional(),
    listable: core.serialization.boolean().optional(),
    taggable: core.serialization.boolean().optional(),
    allowDynamicMaxPlayers: core.serialization.property(
        "allow_dynamic_max_players",
        core.serialization.boolean().optional()
    ),
    actions: cloud_version_matchmaker_game_mode$$gameModeActions.optional(),
    tier: core.serialization.string().optional(),
    idleLobbies: core.serialization.property(
        "idle_lobbies",
        cloud_version_matchmaker_game_mode$$gameModeIdleLobbiesConfig.optional()
    ),
});

export declare namespace GameMode {
    interface Raw {
        regions?: Record<string, cloud.version.matchmaker.GameModeRegion.Raw> | null;
        max_players?: number | null;
        max_players_direct?: number | null;
        max_players_party?: number | null;
        docker?: cloud.version.matchmaker.GameModeRuntimeDocker.Raw | null;
        listable?: boolean | null;
        taggable?: boolean | null;
        allow_dynamic_max_players?: boolean | null;
        actions?: cloud.version.matchmaker.GameModeActions.Raw | null;
        tier?: string | null;
        idle_lobbies?: cloud.version.matchmaker.GameModeIdleLobbiesConfig.Raw | null;
    }
}
