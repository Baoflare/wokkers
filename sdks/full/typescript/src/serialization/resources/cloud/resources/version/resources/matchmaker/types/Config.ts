/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../../../index";
import * as Rivet from "../../../../../../../../api/index";
import * as core from "../../../../../../../../core";
import { GameMode as cloud_version_matchmaker_game_mode$$gameMode } from "../resources/gameMode/types/GameMode";
import { Captcha as cloud_version_matchmaker_common$$captcha } from "../resources/common/types/Captcha";
import { GameModeRegion as cloud_version_matchmaker_game_mode$$gameModeRegion } from "../resources/gameMode/types/GameModeRegion";
import { GameModeRuntimeDocker as cloud_version_matchmaker_game_mode$$gameModeRuntimeDocker } from "../resources/gameMode/types/GameModeRuntimeDocker";
import { GameModeIdleLobbiesConfig as cloud_version_matchmaker_game_mode$$gameModeIdleLobbiesConfig } from "../resources/gameMode/types/GameModeIdleLobbiesConfig";
import { LobbyGroup as cloud_version_matchmaker_lobby_group$$lobbyGroup } from "../resources/lobbyGroup/types/LobbyGroup";
import { cloud } from "../../../../../../index";

export const Config: core.serialization.ObjectSchema<
    serializers.cloud.version.matchmaker.Config.Raw,
    Rivet.cloud.version.matchmaker.Config
> = core.serialization.object({
    gameModes: core.serialization.property(
        "game_modes",
        core.serialization.record(core.serialization.string(), cloud_version_matchmaker_game_mode$$gameMode).optional()
    ),
    captcha: cloud_version_matchmaker_common$$captcha.optional(),
    devHostname: core.serialization.property("dev_hostname", core.serialization.string().optional()),
    regions: core.serialization
        .record(core.serialization.string(), cloud_version_matchmaker_game_mode$$gameModeRegion)
        .optional(),
    maxPlayers: core.serialization.property("max_players", core.serialization.number().optional()),
    maxPlayersDirect: core.serialization.property("max_players_direct", core.serialization.number().optional()),
    maxPlayersParty: core.serialization.property("max_players_party", core.serialization.number().optional()),
    docker: cloud_version_matchmaker_game_mode$$gameModeRuntimeDocker.optional(),
    tier: core.serialization.string().optional(),
    idleLobbies: core.serialization.property(
        "idle_lobbies",
        cloud_version_matchmaker_game_mode$$gameModeIdleLobbiesConfig.optional()
    ),
    lobbyGroups: core.serialization.property(
        "lobby_groups",
        core.serialization.list(cloud_version_matchmaker_lobby_group$$lobbyGroup).optional()
    ),
});

export declare namespace Config {
    interface Raw {
        game_modes?: Record<string, cloud.version.matchmaker.GameMode.Raw> | null;
        captcha?: cloud.version.matchmaker.Captcha.Raw | null;
        dev_hostname?: string | null;
        regions?: Record<string, cloud.version.matchmaker.GameModeRegion.Raw> | null;
        max_players?: number | null;
        max_players_direct?: number | null;
        max_players_party?: number | null;
        docker?: cloud.version.matchmaker.GameModeRuntimeDocker.Raw | null;
        tier?: string | null;
        idle_lobbies?: cloud.version.matchmaker.GameModeIdleLobbiesConfig.Raw | null;
        lobby_groups?: cloud.version.matchmaker.LobbyGroup.Raw[] | null;
    }
}
