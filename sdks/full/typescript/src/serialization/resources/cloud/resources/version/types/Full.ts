/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../..";
import * as Rivet from "../../../../../../api";
import * as core from "../../../../../../core";

export const Full: core.serialization.ObjectSchema<serializers.cloud.version.Full.Raw, Rivet.cloud.version.Full> =
    core.serialization.object({
        versionId: core.serialization.property("version_id", core.serialization.string()),
        createTs: core.serialization.property(
            "create_ts",
            core.serialization.lazy(async () => (await import("../../../../..")).Timestamp)
        ),
        displayName: core.serialization.property(
            "display_name",
            core.serialization.lazy(async () => (await import("../../../../..")).DisplayName)
        ),
        config: core.serialization.lazyObject(async () => (await import("../../../../..")).cloud.version.Config),
    });

export declare namespace Full {
    interface Raw {
        version_id: string;
        create_ts: serializers.Timestamp.Raw;
        display_name: serializers.DisplayName.Raw;
        config: serializers.cloud.version.Config.Raw;
    }
}
