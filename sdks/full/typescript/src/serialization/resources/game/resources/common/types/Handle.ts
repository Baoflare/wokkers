/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Rivet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { Identifier as common$$identifier } from "../../../../common/types/Identifier";
import { DisplayName as common$$displayName } from "../../../../common/types/DisplayName";
import { common } from "../../../../index";

export const Handle: core.serialization.ObjectSchema<serializers.game.Handle.Raw, Rivet.game.Handle> =
    core.serialization.object({
        gameId: core.serialization.property("game_id", core.serialization.string()),
        nameId: core.serialization.property("name_id", common$$identifier),
        displayName: core.serialization.property("display_name", common$$displayName),
        logoUrl: core.serialization.property("logo_url", core.serialization.string().optional()),
        bannerUrl: core.serialization.property("banner_url", core.serialization.string().optional()),
    });

export declare namespace Handle {
    interface Raw {
        game_id: string;
        name_id: common.Identifier.Raw;
        display_name: common.DisplayName.Raw;
        logo_url?: string | null;
        banner_url?: string | null;
    }
}
