/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../index";
import * as Rivet from "../../../../api/index";
import * as core from "../../../../core";
import { BannedIdentity as group_common$$bannedIdentity } from "../resources/common/types/BannedIdentity";
import { WatchResponse as common$$watchResponse } from "../../common/types/WatchResponse";
import { group, common } from "../../index";

export const GetBansResponse: core.serialization.ObjectSchema<
    serializers.group.GetBansResponse.Raw,
    Rivet.group.GetBansResponse
> = core.serialization.object({
    bannedIdentities: core.serialization.property(
        "banned_identities",
        core.serialization.list(group_common$$bannedIdentity)
    ),
    anchor: core.serialization.string().optional(),
    watch: common$$watchResponse,
});

export declare namespace GetBansResponse {
    interface Raw {
        banned_identities: group.BannedIdentity.Raw[];
        anchor?: string | null;
        watch: common.WatchResponse.Raw;
    }
}
