/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Rivet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { Timestamp as common$$timestamp } from "../../../../common/types/Timestamp";
import { GlobalEventKind as identity_common$$globalEventKind } from "./GlobalEventKind";
import { GlobalEventNotification as identity_common$$globalEventNotification } from "./GlobalEventNotification";
import { common, identity } from "../../../../index";

export const GlobalEvent: core.serialization.ObjectSchema<
    serializers.identity.GlobalEvent.Raw,
    Rivet.identity.GlobalEvent
> = core.serialization.object({
    ts: common$$timestamp,
    kind: identity_common$$globalEventKind,
    notification: identity_common$$globalEventNotification.optional(),
});

export declare namespace GlobalEvent {
    interface Raw {
        ts: common.Timestamp.Raw;
        kind: identity.GlobalEventKind.Raw;
        notification?: identity.GlobalEventNotification.Raw | null;
    }
}
