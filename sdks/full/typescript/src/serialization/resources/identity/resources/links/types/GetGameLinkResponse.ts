/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../../index";
import * as Rivet from "../../../../../../api/index";
import * as core from "../../../../../../core";
import { GameLinkStatus as identity_common$$gameLinkStatus } from "../../common/types/GameLinkStatus";
import { Handle as game_common$$handle } from "../../../../game/resources/common/types/Handle";
import { Handle as identity_common$$handle } from "../../common/types/Handle";
import { GetGameLinkNewIdentity as identity_links$$getGameLinkNewIdentity } from "./GetGameLinkNewIdentity";
import { WatchResponse as common$$watchResponse } from "../../../../common/types/WatchResponse";
import { identity, game, common } from "../../../../index";

export const GetGameLinkResponse: core.serialization.ObjectSchema<
    serializers.identity.GetGameLinkResponse.Raw,
    Rivet.identity.GetGameLinkResponse
> = core.serialization.object({
    status: identity_common$$gameLinkStatus,
    game: game_common$$handle,
    currentIdentity: core.serialization.property("current_identity", identity_common$$handle),
    newIdentity: core.serialization.property("new_identity", identity_links$$getGameLinkNewIdentity.optional()),
    watch: common$$watchResponse,
});

export declare namespace GetGameLinkResponse {
    interface Raw {
        status: identity.GameLinkStatus.Raw;
        game: game.Handle.Raw;
        current_identity: identity.Handle.Raw;
        new_identity?: identity.GetGameLinkNewIdentity.Raw | null;
        watch: common.WatchResponse.Raw;
    }
}
