/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Rivet from "../../../../..";
import { Datacenters } from "../resources/datacenters/client/Client";
export declare namespace Clusters {
    interface Options {
        environment?: core.Supplier<environments.RivetEnvironment | string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
export declare class Clusters {
    protected readonly _options: Clusters.Options;
    constructor(_options?: Clusters.Options);
    /**
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    getServerIps(request?: Rivet.admin.clusters.GetServerIpsRequest, requestOptions?: Clusters.RequestOptions): Promise<Rivet.admin.clusters.GetServerIpsResponse>;
    /**
     * Get clusters
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    list(requestOptions?: Clusters.RequestOptions): Promise<Rivet.admin.clusters.ListResponse>;
    /**
     * Create a new cluster
     * @throws {@link Rivet.InternalError}
     * @throws {@link Rivet.RateLimitError}
     * @throws {@link Rivet.ForbiddenError}
     * @throws {@link Rivet.UnauthorizedError}
     * @throws {@link Rivet.NotFoundError}
     * @throws {@link Rivet.BadRequestError}
     */
    create(request: Rivet.admin.clusters.CreateRequest, requestOptions?: Clusters.RequestOptions): Promise<Rivet.admin.clusters.CreateResponse>;
    protected _datacenters: Datacenters | undefined;
    get datacenters(): Datacenters;
    protected _getAuthorizationHeader(): Promise<string | undefined>;
}
